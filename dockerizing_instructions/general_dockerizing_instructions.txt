Credit to:
https://stackabuse.com/dockerizing-a-spring-boot-application/


. Note that for this tutorial, amigoscode only dockerized a Postgres DB, NOT the app itself!!!



========== Dockerizing with Dockerfile ==========

. Create Dockerfile with the following contents:

FROM java:8-jdk-alpine

COPY ./target/<name_of_jar_file> /usr/app/

WORKDIR /usr/app

RUN sh -c 'touch <name_of_jar_file>'

ENTRYPOINT ["java","-jar","<name_of_jar_file>"]



. Navigate to the directory where the Dockerfile resides and run this command:
docker build -t <name_you_wanna_give_to_your_image>:<version_no> .
We built the image using docker build. We gave it a name with the -t flag and specified the current directory where the Dockerfile is. The image is built and stored in our local docker registry.



. Run the image with this command:
docker run -p 8090:8080  <name_of_your_image>

We know that each container is an isolated environment in itself and we have to map the port of the host operating system - 8090 and the port inside the container - 8080, which is specified as the -p 8090:8080 argument. 




========== Dockerizing with Maven Docker plugin ==========

In the previous section we wrote a simple Dockerfile and build our application using the native docker build command. However, there are a couple of issues that we may encounter in our projects using this method:

* The .jar name - We have to mention the jar name (along with the version) in the file. As our application grows our versions will change and we have to, again and again, update this Dockerfile too.
* Using the terminal - We have to manually open a terminal and run Docker commands. It would be nice if we could make it a part of a Maven life-cycle so that we can build images as a part of our CI/CD (Continous Integration/Continous Delivery) pipelines.



. The Docker Maven plugin is called fabric8io/docker-maven-plugin.



. Add XML for the Docker Maven plugin in pom.xml:

<plugin>
   <groupId>io.fabric8</groupId>
   <artifactId>docker-maven-plugin</artifactId>
   <version>0.26.0</version>
   <extensions>true</extensions>
   <configuration>
      <verbose>true</verbose>
      <images>
         <image>
            <name>${project.artifactId}</name>
            <build>
               <from>java:8-jdk-alpine</from>
               <entryPoint>
                  <exec>
                     <args>java</args>
                     <args>-jar</args>
                     <args>/maven/${project.artifactId}-${project.version}.jar</args>
                  </exec>
               </entryPoint>
               <assembly>
                  <descriptorRef>artifact</descriptorRef>
               </assembly>
            </build>
         </image>
      </images>
   </configuration>
   <executions>
      <execution>
         <id>build</id>
         <phase>post-integration-test</phase>
         <goals>
            <goal>build</goal>
         </goals>
      </execution>
   </executions>
</plugin>



. Run this command in your project folder
mvn clean install -Ddocker 

NOTE: If your application depends on a DB and the DB isn't running, then building the image will fail because part of the process involves packaging the project into a JAR. That process in turn involves running the application through some tests that will use the DB. If you want to disable these tests, then you can include this XML in the pom.xml:

<plugin>
<groupId>org.apache.maven.plugins</groupId
   <artifactId>maven-surefire-plugin</artifactId>
   <configuration
      <skipTests>true</skipTests
   </configuration>
</plugin>

OR, you can run this command:

mvn clean install -DskipTests


. THOUGHT: If you want to automate the command in the previous bullet point with each docker build, then perhaps you can include it in the project's Dockerfile with the RUN keyword?



. Run the image with this command:
docker run -p 8090:8080  <name_of_your_image>